Зад 1.
а) Да се напише предикат hasDigit x y, който проверява дали естествено число x притежава
   десетичния си запис цифрата y.
б) Да се напише функция numbersWith, която по дадена цифра d конструира безкраен поток, или списък
   от естествени числа, коит съдържат цифрата d.

   Пример: numbersWith 5 -> [5, 15, 25, 35, 45, 50, 51......

Зад 2.
  Да се напише функция reachable, която по даден ориентиран граф g и връх в него v намира броя на върховете
  ,от които може да се достигне до v. опишете накратко описанието на графа, което използвате.

Зад 3.
  Да се напише функция sumUniquie, която по списък от цели числа намира сумата на тези от тях, които са уникални
  в рамките на списъка, в който се срещат.

  Пример: sumUnique [[1, 2, 3, 2], [-4, -4], [5]] -> 9 (= 1 + 3 + 5)

Зад 4.
  Да се напише функция от по-висок ред keepInside, която по дадена матрица от числа и по дадена едноаргументна
  функция f, намира списъка от всички колони на матрицата, които започват от f. Казваме, че дадена колона се
  запазва от f, ако за всяко x от c, f(x) също е елемент на c.

  Пример: keepInside [[1, 0, 5], [-1, 0, 2]] (\x -> x ^ 2) -> [[1, -1], [0, 0]]

Зад 5.
  Книга се представя с наредена двойка от вида (заглавие, година на издаване).
  Библиотека се предсатвя със списък от книги.
  а) Да се напише функция findUniques, която намира имената на всички книги в библиотеката,
     за които няма други издадени в същата година.
  б) Да се напише функция longestTitleYear, която намира годината, в която е издадена книгата
     с най-дълго заглавие.

  Примери:
          lib = [("SICP", 1996), ("Learn You a Haskell for a Great Good", 2011),
          ("Real world Haskell", 2008), ("Programming in Haskell", 2011)]
          findUniques lib -> ["SICP", "Real World Haskell"]
          longestTitleYear -> 2011s